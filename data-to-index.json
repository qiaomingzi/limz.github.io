[{"content":"hugo基本使用，通过hugo搭建个人blog\n参考 [hugo] :https://gohugo.io/1.hugo结构说明 # 站点结构 ├── archetypes # 原型 ├── config.toml # 站点配置 ├── content # 站点内容目录 ├── data # 数据模板 ├── layouts # 站点布局模板 ├── static # 静态内容 └── themes # 内容目录 content └── post ├── first-post │ ├── images │ │ ├── a.jpg │ │ ├── b.jpg │ │ └── c.jpg │ ├── index.md (root of page bundle) │ ├── latest.html │ ├── manual.json │ ├── notice.md │ ├── office.mp3 │ ├── pocket.mp4 │ ├── rating.pdf │ └── safety.txt └── second-post └── index.md (root of page bundle # 文章描述 categories = [\u0026#34;目录1\u0026#34;, \u0026#34;目录2\u0026#34;] date = \u0026#34;日期+时间\u0026#34; description = \u0026#34;描述\u0026#34; slug = \u0026#34;spf13-vim-3-0-release-and-new-website\u0026#34; tags = [\u0026#34;标签1\u0026#34;, \u0026#34;标签2\u0026#34;] title = \u0026#34;标题\u0026#34; 2.基本使用 # window版本下载`https://github.com/gohugoio/hugo/releases/download/v0.83.1/hugo_extended_0.83.1_Windows-64bit.zip` # 配置环境变量 path /hugo_path/ # 创建站点 hugo new site quickstart cd quickstart # 添加主题/展示模板 git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke echo theme = \\\u0026#34;ananke\\\u0026#34; \u0026gt;\u0026gt; config.toml # 新建文章 hugo new posts/my-first-post.md # 发布预览 hugo server -D #默认输出静态文件到./public目录下，或者使用参数指定public目录路径(-d/--destination flag to change it, or set publishdir in the config file). 访问 http://localhost:1313 # 发布静态文件到github 上传public下的文件到 `https://github.com/username/username.github.io` 访问 `https://username.github.io` 集成github pages [源]hugo repository:qiaomingzi/limz-blog-hugo\n[目标]gitpages repository: qiaomingzi/qiaomingzi.github.io\n[1]生成密钥key\nssh-keygen -t rsa -b 4096 -C \u0026quot;github邮箱\u0026quot; -f gh-pages -N \u0026quot;\u0026quot; [2]配置limz-blog-hugo/setting/Deploy keys新增公钥 key:刚才生成的公钥(gh-pages.pub)\n[3]配置qiaomingzi.github.io/setting/Secrets新增密钥 name:ACTIONS_DEPLOY_KEY value:刚才生成的密钥(gh-pages)\n[4]创建文件limz-blog-hugo/.github/workflows/gh-pages.yml\nname: github pages on: push: branches: - master jobs: deploy: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@v2 - name: Setup Node uses: actions/setup-node@v2.1.2 with: node-version: '12.x' - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: '0.83.1' - name: Cache dependencies uses: actions/cache@v2 with: path: ~/.npm key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} restore-keys: | ${{ runner.os }}-node- - run: npm run install:prod - run: npm run build - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} # github_token: ${{ secrets.GITHUB_TOKEN }} external_repository: qiaomingzi/qiaomingzi.github.io publish_branch: master # default: gh-pages publish_dir: ./public [5]limz-blog-hugo/Actions查看或触发发布\n3.hugo命令 hugo is the main command, used to build your Hugo site. Hugo is a Fast and Flexible Static Site Generator built with love by spf13 and friends in Go. Complete documentation is available at https://gohugo.io/. Usage: hugo [flags] hugo [command] Available Commands: check Contains some verification checks config Print the site configuration convert Convert your content to different formats env Print Hugo version and environment info gen A collection of several useful generators. help Help about any command import Import your site from others. list Listing out various types of content new Create new content for your site server A high performance webserver version Print the version number of Hugo Flags: -b, --baseURL string hostname (and path) to the root, e.g. https://spf13.com/ -D, --buildDrafts include content marked as draft -E, --buildExpired include expired content -F, --buildFuture include content with publishdate in the future --cacheDir string filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/ --cleanDestinationDir remove files from destination not found in static directories --config string config file (default is path/config.yaml|json|toml) --configDir string config dir (default \u0026quot;config\u0026quot;) -c, --contentDir string filesystem path to content directory --debug debug output -d, --destination string filesystem path to write files to --disableKinds strings disable different kind of pages (home, RSS etc.) --enableGitInfo add Git revision, date and author info to the pages -e, --environment string build environment --forceSyncStatic copy all files when static is changed. --gc enable to run some cleanup tasks (remove unused cache files) after the build -h, --help help for hugo --i18n-warnings print missing translations --ignoreCache ignores the cache directory -l, --layoutDir string filesystem path to layout directory --log enable Logging --logFile string log File path (if set, logging enabled automatically) --minify minify any supported output format (HTML, XML etc.) --noChmod don't sync permission mode of files --noTimes don't sync modification time of files --path-warnings print warnings on duplicate target paths etc. --quiet build in quiet mode --renderToMemory render to memory (only useful for benchmark testing) -s, --source string filesystem path to read files relative from --templateMetrics display metrics about template executions --templateMetricsHints calculate some improvement hints when combined with --templateMetrics -t, --theme strings themes to use (located in /themes/THEMENAME/) --themesDir string filesystem path to themes directory --trace file write trace to file (not useful in general) -v, --verbose verbose output --verboseLog verbose logging -w, --watch watch filesystem for changes and recreate as needed Use \u0026quot;hugo [command] --help\u0026quot; for more information about a command. 4.问题 1.ERROR 2021/05/08 14:30:50 TOCSS: failed to transform \u0026ldquo;styles/print-bundle.scss\u0026rdquo; (text/x-scss). Check your Hugo installation; you need the extended version to build SCSS/SASS. 确认下载的hugo版本呢是hugo_extend版本 而不是标准版本\n2.Hugo - Failed to find a valid digest in the \u0026lsquo;integrity\u0026rsquo; attribute for resource I replaced:\nintegrity=\u0026ldquo;J6YEe5hjKuk/TENUR7jEMr6VNR4lwN8iVpSGj1g8MU4=\u0026rdquo;\nwith:\nintegrity=\u0026quot;\u0026quot;\nin the css tag of every single index.html file.\nThis worked, although I found a solution to do this automatically and skip the error in the first place.\nSolution(!) - Update: It looks like the head.html file under the assets folder has the following structure:\n{{- $stylesheet := (resources.Match \u0026quot;css/*.css\u0026quot;) | resources.Concat \u0026quot;assets/css/stylesheet.css\u0026quot; | minify | fingerprint -}} \u0026lt;link href=\u0026quot;{{ $stylesheet.Permalink }}\u0026quot; integrity=\u0026quot;{{ $stylesheet.Data.Integrity }}\u0026quot; rel=\u0026quot;preload stylesheet\u0026quot; as=\u0026quot;style\u0026quot;\u0026gt; blog-hugo blog-hugo\\layouts\\partials\\head.html\nhugo-clarity hugo-clarity\\layouts\\partials\\math.html themes\\hugo-clarity\\layouts_default\\baseof.html\n","dateformatted":"7, May 2021","dateiso":"2021-05-07T17:03:36+08:00","ref":"/hugo%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","summary":"\n hugo基本使用，通过hugo搭建个人blog\n参考 [hugo] :https://gohugo.io/1.hugo结构说明 # 站点结构 ├── archetypes # 原型 ├── config.toml # 站点配置 ├── content # 站点内容目录 ├── data # 数据模板 ├── layouts # 站点布局模板 ├── static # 静态内容 └── themes # 内容目录 content └── post ├── first-post │ ├── images │ │ ├── a.\n\n","tags":null,"title":"Hugo基本使用"},{"content":"目录 跳过目录\n 本文目标 如何使用本教程 正则表达式到底是什么东西？ 入门 测试正则表达式 元字符 字符转义 重复 字符类 分枝条件 反义 分组 后向引用 零宽断言 负向零宽断言 注释 贪婪与懒惰 处理选项 平衡组/递归匹配 还有些什么东西没提到 联系作者 网上的资源及本文参考文献 更新纪录 本文目标 30分钟内让你明白正则表达式是什么，并对它有一些基本的了解，让你可以在自己的程序或网页里使用它。\n如何使用本教程 最重要的是——请给我30分钟，如果你没有使用正则表达式的经验，请不要试图在30秒内入门——除非你是超人 :)\n别被下面那些复杂的表达式吓倒，只要跟着我一步一步来，你会发现正则表达式其实并没有你想像中的那么困难。当然，如果你看完了这篇教程之后，发现自己明白了很多，却又几乎什么都记不得，那也是很正常的——我认为，没接触过正则表达式的人在看完这篇教程后，能把提到过的语法记住80%以上的可能性为零。这里只是让你明白基本的原理，以后你还需要多练习，多使用，才能熟练掌握正则表达式。\n除了作为入门教程之外，本文还试图成为可以在日常工作中使用的正则表达式语法参考手册。就作者本人的经历来说，这个目标还是完成得不错的——你看，我自己也没能把所有的东西记下来，不是吗？\n清除格式 文本格式约定：专业术语 元字符/语法格式 正则表达式 正则表达式中的一部分(用于分析) 对其进行匹配的源字符串 对正则表达式或其中一部分的说明\n隐藏边注 本文右边有一些注释，主要是用来提供一些相关信息，或者给没有程序员背景的读者解释一些基本概念，通常可以忽略。\n正则表达式到底是什么东西？ 字符是计算机软件处理文字时最基本的单位，可能是字母，数字，标点符号，空格，换行符，汉字等等。字符串是0个或更多个字符的序列。文本也就是文字，字符串。说某个字符串匹配某个正则表达式，通常是指这个字符串里有一部分（或几部分分别）能满足表达式给出的条件。\n在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。\n很可能你使用过Windows/Dos下用于文件查找的通配符(wildcard)，也就是和?。如果你想查找某个目录下的所有的Word文档的话，你会搜索.doc。在这里，*会被解释成任意的字符串。和通配符类似，正则表达式也是用来进行文本匹配的工具，只不过比起通配符，它能更精确地描述你的需求——当然，代价就是更复杂——比如你可以编写一个正则表达式，用来查找所有以0开头，后面跟着2-3个数字，然后是一个连字号“-”，最后是7或8位数字的字符串(像010-12345678或0376-7654321)。\n入门 学习正则表达式的最好方法是从例子开始，理解例子之后再自己对例子进行修改，实验。下面给出了不少简单的例子，并对它们作了详细的说明。\n假设你在一篇英文小说里查找hi，你可以使用正则表达式hi。\n这几乎是最简单的正则表达式了，它可以精确匹配这样的字符串：由两个字符组成，前一个字符是h,后一个是i。通常，处理正则表达式的工具会提供一个忽略大小写的选项，如果选中了这个选项，它可以匹配hi,HI,Hi,hI这四种情况中的任意一种。\n不幸的是，很多单词里包含hi这两个连续的字符，比如him,history,high等等。用hi来查找的话，这里边的hi也会被找出来。如果要精确地查找hi这个单词的话，我们应该使用\\bhi\\b。\n\\b是正则表达式规定的一个特殊代码（好吧，某些人叫它元字符，metacharacter），代表着单词的开头或结尾，也就是单词的分界处。虽然通常英文的单词是由空格，标点符号或者换行来分隔的，但是\\b并不匹配这些单词分隔字符中的任何一个，它只匹配一个位置。\n如果需要更精确的说法，\\b匹配这样的位置：它的前一个字符和后一个字符不全是(一个是,一个不是或不存在)\\w。\n假如你要找的是hi后面不远处跟着一个Lucy，你应该用\\bhi\\b.*\\bLucy\\b。\n这里，.是另一个元字符，匹配除了换行符以外的任意字符。同样是元字符，不过它代表的不是字符，也不是位置，而是数量——它指定前边的内容可以连续重复使用任意次以使整个表达式得到匹配。因此，.连在一起就意味着任意数量的不包含换行的字符。现在\\bhi\\b.\\bLucy\\b的意思就很明显了：先是一个单词hi,然后是任意个任意字符(但不能是换行)，最后是Lucy这个单词。\n换行符就是'\\n',ASCII编码为10(十六进制0x0A)的字符。\n如果同时使用其它元字符，我们就能构造出功能更强大的正则表达式。比如下面这个例子：\n0\\d\\d-\\d\\d\\d\\d\\d\\d\\d\\d匹配这样的字符串：以0开头，然后是两个数字，然后是一个连字号“-”，最后是8个数字(也就是中国的电话号码。当然，这个例子只能匹配区号为3位的情形)。\n这里的\\d是个新的元字符，匹配一位数字(0，或1，或2，或……)。-不是元字符，只匹配它本身——连字符(或者减号，或者中横线，或者随你怎么称呼它)。\n为了避免那么多烦人的重复，我们也可以这样写这个表达式：0\\d{2}-\\d{8}。 这里\\d后面的{2}({8})的意思是前面\\d必须连续重复匹配2次(8次)。\n测试正则表达式 其它可用的测试工具:\n RegexBuddy Javascript正则表达式在线测试工具 如果你不觉得正则表达式很难读写的话，要么你是一个天才，要么，你不是地球人。正则表达式的语法很令人头疼，即使对经常使用它的人来说也是如此。由于难于读写，容易出错，所以找一种工具对正则表达式进行测试是很有必要的。\n不同的环境下正则表达式的一些细节是不相同的，本教程介绍的是微软 .Net Framework 4.0 下正则表达式的行为，所以，我向你推荐我编写的.Net下的工具 正则表达式测试器。请参考该页面的说明来安装和运行该软件。\n下面是Regex Tester运行时的截图：\n元字符 现在你已经知道几个很有用的元字符了，如\\b,.,*，还有\\d.正则表达式里还有更多的元字符，比如\\s匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等。\\w匹配字母或数字或下划线或汉字等。\n对中文/汉字的特殊处理是由.Net提供的正则表达式引擎支持的，其它环境下的具体情况请查看相关文档。\n下面来看看更多的例子：\n\\ba\\w*\\b匹配以字母a开头的单词——先是某个单词开始处(\\b)，然后是字母a,然后是任意数量的字母或数字(\\w*)，最后是单词结束处(\\b)。\n好吧，现在我们说说正则表达式里的单词是什么意思吧：就是不少于一个的连续的\\w。不错，这与学习英文时要背的成千上万个同名的东西的确关系不大 :)\n\\d+匹配1个或更多连续的数字。这里的+是和类似的元字符，不同的是匹配重复任意次(可能是0次)，而+则匹配重复1次或更多次。\n\\b\\w{6}\\b 匹配刚好6个字符的单词。\n 代码 说明 . 匹配除换行符以外的任意字符 \\w 匹配字母或数字或下划线或汉字 \\s 匹配任意的空白符 \\d 匹配数字 \\b 匹配单词的开始或结束 ^ 匹配字符串的开始 $ 匹配字符串的结束 正则表达式引擎通常会提供一个“测试指定的字符串是否匹配一个正则表达式”的方法，如JavaScript里的RegExp.test()方法或.NET里的Regex.IsMatch()方法。这里的匹配是指是字符串里有没有符合表达式规则的部分。如果不使用^和$的话，对于\\d{5,12}而言，使用这样的方法就只能保证字符串里包含5到12连续位数字，而不是整个字符串就是5到12位数字。\n元字符^（和数字6在同一个键位上的符号）和$都匹配一个位置，这和\\b有点类似。^匹配你要用来查找的字符串的开头，$匹配结尾。这两个代码在验证输入的内容时非常有用，比如一个网站如果要求你填写的QQ号必须为5位到12位数字时，可以使用：^\\d{5,12}$。\n这里的{5,12}和前面介绍过的{2}是类似的，只不过{2}匹配只能不多不少重复2次，{5,12}则是重复的次数不能少于5次，不能多于12次，否则都不匹配。\n因为使用了^和$，所以输入的整个字符串都要用来和\\d{5,12}来匹配，也就是说整个输入必须是5到12个数字，因此如果输入的QQ号能匹配这个正则表达式的话，那就符合要求了。\n和忽略大小写的选项类似，有些正则表达式处理工具还有一个处理多行的选项。如果选中了这个选项，^和$的意义就变成了匹配行的开始处和结束处。\n字符转义 如果你想查找元字符本身的话，比如你查找.,或者*,就出现了问题：你没办法指定它们，因为它们会被解释成别的意思。这时你就得使用\\来取消这些字符的特殊意义。因此，你应该使用.和*。当然，要查找\\本身，你也得用\\.\n例如：unibetter.com匹配unibetter.com，C:\\Windows匹配C:\\Windows。\n重复 你已经看过了前面的*,+,{2},{5,12}这几个匹配重复的方式了。下面是正则表达式中所有的限定符(指定数量的代码，例如*,{5,12}等)：\n 代码/语法 说明 * 重复零次或更多次 + 重复一次或更多次 ? 重复零次或一次 {n} 重复n次 {n,} 重复n次或更多次 {n,m} 重复n到m次 下面是一些使用重复的例子：\nWindows\\d+匹配Windows后面跟1个或更多数字\n^\\w+匹配一行的第一个单词(或整个字符串的第一个单词，具体匹配哪个意思得看选项设置)\n字符类 要想查找数字，字母或数字，空白是很简单的，因为已经有了对应这些字符集合的元字符，但是如果你想匹配没有预定义元字符的字符集合(比如元音字母a,e,i,o,u),应该怎么办？\n很简单，你只需要在方括号里列出它们就行了，像[aeiou]就匹配任何一个英文元音字母，[.?!]匹配标点符号(.或?或!)。\n我们也可以轻松地指定一个字符范围，像[0-9]代表的含意与\\d就是完全一致的：一位数字；同理[a-z0-9A-Z_]也完全等同于\\w（如果只考虑英文的话）。\n下面是一个更复杂的表达式：(?0\\d{2}[) -]?\\d{8}。\n“(”和“)”也是元字符，后面的分组节里会提到，所以在这里需要使用转义。\n这个表达式可以匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等。我们对它进行一些分析吧：首先是一个转义字符(,它能出现0次或1次(?),然后是一个0，后面跟着2个数字(\\d{2})，然后是)或-或空格中的一个，它出现1次或不出现(?)，最后是8个数字(\\d{8})。\n分枝条件 不幸的是，刚才那个表达式也能匹配010)12345678或(022-87654321这样的“不正确”的格式。要解决这个问题，我们需要用到分枝条件。正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用|把不同的规则分隔开。听不明白？没关系，看例子：\n0\\d{2}-\\d{8}|0\\d{3}-\\d{7}这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)。\n(0\\d{2})[- ]?\\d{8}|0\\d{2}[- ]?\\d{8}这个表达式匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔。你可以试试用分枝条件把这个表达式扩展成也支持4位区号的。\n\\d{5}-\\d{4}|\\d{5}这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。之所以要给出这个例子是因为它能说明一个问题：使用分枝条件时，要注意各个条件的顺序。如果你把它改成\\d{5}|\\d{5}-\\d{4}的话，那么就只会匹配5位的邮编(以及9位邮编的前5位)。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。\n分组 我们已经提到了怎么重复单个字符（直接在字符后面加上限定符就行了）；但如果想要重复多个字符又该怎么办？你可以用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了，你也可以对子表达式进行其它一些操作(后面会有介绍)。\n(\\d{1,3}.){3}\\d{1,3}是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它：\\d{1,3}匹配1到3位的数字，(\\d{1,3}.){3}匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字(\\d{1,3})。\nIP地址中每个数字都不能大于255，大家千万不要被《24》第三季的编剧给忽悠了……\n不幸的是，它也将匹配256.300.888.999这种不可能存在的IP地址。如果能使用算术比较的话，或许能简单地解决这个问题，但是正则表达式中并不提供关于数学的任何功能，所以只能使用冗长的分组，选择，字符类来描述一个正确的IP地址：((2[0-4]\\d|25[0-5]|[01]?\\d\\d?).){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)。\n理解这个表达式的关键是理解2[0-4]\\d|25[0-5]|[01]?\\d\\d?，这里我就不细说了，你自己应该能分析得出来它的意义。\n反义 有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到反义：\n 代码/语法 说明 \\W 匹配任意不是字母，数字，下划线，汉字的字符 \\S 匹配任意不是空白符的字符 \\D 匹配任意非数字的字符 \\B 匹配不是单词开头或结束的位置 [^x] 匹配除了x以外的任意字符 [^aeiou] 匹配除了aeiou这几个字母以外的任意字符 例子：\\S+匹配不包含空白符的字符串。\n\u0026lt;a[^\u0026gt;]+\u0026gt;匹配用尖括号括起来的以a开头的字符串。\n后向引用 使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。\n呃……其实,组号分配还不像我刚说得那么简单：\n 分组0对应整个正则表达式 实际上组号分配过程是要从左向右扫描两遍的：第一遍只给未命名组分配，第二遍只给命名组分配－－因此所有命名组的组号都大于未命名的组号 你可以使用(?:exp)这样的语法来剥夺一个分组对组号分配的参与权． 后向引用用于重复搜索前面某个分组匹配的文本。例如，\\1代表分组1匹配的文本。难以理解？请看示例：\n\\b(\\w+)\\b\\s+\\1\\b可以用来匹配重复的单词，像go go, 或者kitty kitty。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字(\\b(\\w+)\\b)，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符(\\s+)，最后是分组1中捕获的内容（也就是前面匹配的那个单词）(\\1)。\n你也可以自己指定子表达式的组名。要指定一个子表达式的组名，请使用这样的语法：(?\\w+)(或者把尖括号换成\u0026rsquo;也行：(?\u0026lsquo;Word\u0026rsquo;\\w+)),这样就把\\w+的组名指定为Word了。要反向引用这个分组捕获的内容，你可以使用\\k,所以上一个例子也可以写成这样：\\b(?\\w+)\\b\\s+\\k\\b。\n使用小括号的时候，还有很多特定用途的语法。下面列出了最常用的一些：\n 分类 代码/语法 说明 捕获 (exp) 匹配exp,并捕获文本到自动命名的组里 (?exp) 匹配exp,并捕获文本到名称为name的组里，也可以写成(?\u0026lsquo;name\u0026rsquo;exp) (?:exp) 匹配exp,不捕获匹配的文本，也不给此分组分配组号 零宽断言 (?=exp) 匹配exp前面的位置 (?\u0026lt;=exp) 匹配exp后面的位置 (?!exp) 匹配后面跟的不是exp的位置 (?\u0026lt;!exp) 匹配前面不是exp的位置 注释 (?#comment) 这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读 我们已经讨论了前两种语法。第三个(?:exp)不会改变正则表达式的处理方式，只是这样的组匹配的内容不会像前两种那样被捕获到某个组里面，也不会拥有组号。“我为什么会想要这样做？”——好问题，你觉得为什么呢？\n零宽断言 地球人，是不是觉得这些术语名称太复杂，太难记了？我也有同感。知道有这么一种东西就行了，它叫什么，随它去吧！人若无名，便可专心练剑；物若无名，便可随意取舍……\n接下来的四个用于查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说它们像\\b,^,$那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为零宽断言。最好还是拿例子来说明吧：\n断言用来声明一个应该为真的事实。正则表达式中只有当断言为真时才会继续进行匹配。\n(?=exp)也叫零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。比如\\b\\w+(?=ing\\b)，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找I\u0026rsquo;m singing while you\u0026rsquo;re dancing.时，它会匹配sing和danc。\n(?\u0026lt;=exp)也叫零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式exp。比如(?\u0026lt;=\\bre)\\w+\\b会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找reading a book时，它匹配ading。\n假如你想要给一个很长的数字中每三位间加一个逗号(当然是从右边加起了)，你可以这样查找需要在前面和里面添加逗号的部分：((?\u0026lt;=\\d)\\d{3})+\\b，用它对1234567890进行查找时结果是234567890。\n下面这个例子同时使用了这两种断言：(?\u0026lt;=\\s)\\d+(?=\\s)匹配以空白符间隔的数字(再次强调，不包括这些空白符)。\n负向零宽断言 前面我们提到过怎么查找不是某个字符或不在某个字符类里的字符的方法(反义)。但是如果我们只是想要确保某个字符没有出现，但并不想去匹配它时怎么办？例如，如果我们想查找这样的单词\u0026ndash;它里面出现了字母q,但是q后面跟的不是字母u,我们可以尝试这样：\n\\b\\wq[^u]\\w\\b匹配包含后面不是字母u的字母q的单词。但是如果多做测试(或者你思维足够敏锐，直接就观察出来了)，你会发现，如果q出现在单词的结尾的话，像Iraq,Benq，这个表达式就会出错。这是因为[^u]总要匹配一个字符，所以如果q是单词的最后一个字符的话，后面的[^u]将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的\\w*\\b将会匹配下一个单词，于是\\b\\w*q[^u]\\w*\\b就能匹配整个Iraq fighting。负向零宽断言能解决这样的问题，因为它只匹配一个位置，并不**消费**任何字符。现在，我们可以这样来解决这个问题：\\b\\w*q(?!u)\\w*\\b。\n零宽度负预测先行断言(?!exp)，断言此位置的后面不能匹配表达式exp。例如：\\d{3}(?!\\d)匹配三位数字，而且这三位数字的后面不能是数字；\\b((?!abc)\\w)+\\b匹配不包含连续字符串abc的单词。\n同理，我们可以用(?\u0026lt;!exp),零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp：(?\u0026lt;![a-z])\\d{7}匹配前面不是小写字母的七位数字。\n请详细分析表达式(?\u0026lt;=\u0026lt;(\\w+)\u0026gt;).*(?=\u0026lt;/\\1\u0026gt;)，这个表达式最能表现零宽断言的真正用途。\n一个更复杂的例子：(?\u0026lt;=\u0026lt;(\\w+)\u0026gt;).(?=\u0026lt;/\\1\u0026gt;)匹配不包含属性的简单HTML标签内里的内容。(?\u0026lt;=\u0026lt;(\\w+)\u0026gt;)指定了这样的前缀：被尖括号括起来的单词(比如可能是)，然后是.(任意的字符串),最后是一个后缀(?=\u0026lt;/\\1\u0026gt;)。注意后缀里的/，它用到了前面提过的字符转义；\\1则是一个反向引用，引用的正是捕获的第一组，前面的(\\w+)匹配的内容，这样如果前缀实际上是的话，后缀就是了。整个表达式匹配的是和之间的内容(再次提醒，不包括前缀和后缀本身)。\n注释 小括号的另一种用途是通过语法(?#comment)来包含注释。例如：2[0-4]\\d(?#200-249)|250-5|[01]?\\d\\d?(?#0-199)。\n要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。例如，我们可以前面的一个表达式写成这样：\n (?\u0026lt;= # 断言要匹配的文本的前缀 \u0026lt;(\\w+)\u0026gt; # 查找尖括号括起来的字母或数字(即HTML/XML标签) ) # 前缀结束 .* # 匹配任意文本 (?= # 断言要匹配的文本的后缀 \u0026lt;\\/\\1\u0026gt; # 查找尖括号括起来的内容：前面是一个\u0026quot;/\u0026quot;，后面是先前捕获的标签 ) # 后缀结束 贪婪与懒惰 当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。以这个表达式为例：a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。\n有时，我们更需要懒惰匹配，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。这样.*?就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。现在看看懒惰版的例子吧：\na.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。\n为什么第一个匹配是aab（第一到第三个字符）而不是ab（第二到第三个字符）？简单地说，因为正则表达式有另一条规则，比懒惰／贪婪规则的优先级更高：最先开始的匹配拥有最高的优先权——The match that begins earliest wins。\n 代码/语法 说明 *? 重复任意次，但尽可能少重复 +? 重复1次或更多次，但尽可能少重复 ?? 重复0次或1次，但尽可能少重复 {n,m}? 重复n到m次，但尽可能少重复 {n,}? 重复n次以上，但尽可能少重复 处理选项 在C#中，你可以使用Regex(String, RegexOptions)构造函数来设置正则表达式的处理选项。如：Regex regex = new Regex(@\u0026quot;\\ba\\w{6}\\b\u0026quot;, RegexOptions.IgnoreCase);\n上面介绍了几个选项如忽略大小写，处理多行等，这些选项能用来改变处理正则表达式的方式。下面是.Net中常用的正则表达式选项：\n 名称 说明 IgnoreCase(忽略大小写) 匹配时不区分大小写。 Multiline(多行模式) 更改^和$的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。(在此模式下,$的精确含意是:匹配\\n之前的位置以及字符串结束前的位置.) Singleline(单行模式) 更改.的含义，使它与每一个字符匹配（包括换行符\\n）。 IgnorePatternWhitespace(忽略空白) 忽略表达式中的非转义空白并启用由#标记的注释。 ExplicitCapture(显式捕获) 仅捕获已被显式命名的组。 一个经常被问到的问题是：是不是只能同时使用多行模式和单行模式中的一种？答案是：不是。这两个选项之间没有任何关系，除了它们的名字比较相似（以至于让人感到疑惑）以外。\n平衡组/递归匹配 这里介绍的平衡组语法是由.Net Framework支持的；其它语言／库不一定支持这种功能，或者支持此功能但需要使用不同的语法。\n有时我们需要匹配像( 100 * ( 50 + 15 ) )这样的可嵌套的层次性结构，这时简单地使用(.+)则只会匹配到最左边的左括号和最右边的右括号之间的内容(这里我们讨论的是贪婪模式，懒惰模式也有下面的问题)。假如原来的字符串里的左括号和右括号出现的次数不相等，比如( 5 / ( 3 + 2 ) ) )，那我们的匹配结果里两者的个数也不会相等。有没有办法在这样的字符串里匹配到最长的，配对的括号之间的内容呢？\n为了避免(和(把你的大脑彻底搞糊涂，我们还是用尖括号代替圆括号吧。现在我们的问题变成了如何把xx \u0026lt;aa aa\u0026gt; yy这样的字符串里，最长的配对的尖括号内的内容捕获出来？\n这里需要用到以下的语法构造：\n (?\u0026lsquo;group\u0026rsquo;) 把捕获的内容命名为group,并压入堆栈(Stack) (?'-group\u0026rsquo;) 从堆栈上弹出最后压入堆栈的名为group的捕获内容，如果堆栈本来为空，则本分组的匹配失败 (?(group)yes|no) 如果堆栈上存在以名为group的捕获内容的话，继续匹配yes部分的表达式，否则继续匹配no部分 (?!) 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败 如果你不是一个程序员（或者你自称程序员但是不知道堆栈是什么东西），你就这样理解上面的三种语法吧：第一个就是在黑板上写一个\u0026quot;group\u0026quot;，第二个就是从黑板上擦掉一个\u0026quot;group\u0026quot;，第三个就是看黑板上写的还有没有\u0026quot;group\u0026quot;，如果有就继续匹配yes部分，否则就匹配no部分。\n我们需要做的是每碰到了左括号，就在压入一个\u0026quot;Open\u0026quot;,每碰到一个右括号，就弹出一个，到了最后就看看堆栈是否为空－－如果不为空那就证明左括号比右括号多，那匹配就应该失败。正则表达式引擎会进行回溯(放弃最前面或最后面的一些字符)，尽量使整个表达式得到匹配。\n\u0026lt; #最外层的左括号 [^\u0026lt;\u0026gt;]* #最外层的左括号后面的不是括号的内容 ( ( (?'Open'\u0026lt;) #碰到了左括号，在黑板上写一个\u0026quot;Open\u0026quot; [^\u0026lt;\u0026gt;]* #匹配左括号后面的不是括号的内容 )+ ( (?'-Open'\u0026gt;) #碰到了右括号，擦掉一个\u0026quot;Open\u0026quot; [^\u0026lt;\u0026gt;]* #匹配右括号后面不是括号的内容 )+ )* (?(Open)(?!)) #在遇到最外层的右括号前面，判断黑板上还有没有没擦掉的\u0026quot;Open\u0026quot;；如果还有，则匹配失败 \u0026gt; #最外层的右括号 平衡组的一个最常见的应用就是匹配HTML,下面这个例子可以匹配嵌套的标签：\u0026lt;div[^\u0026gt;]\u0026gt;[^\u0026lt;\u0026gt;](((?\u0026lsquo;Open\u0026rsquo;\u0026lt;div[^\u0026gt;]\u0026gt;)[^\u0026lt;\u0026gt;])+((?'-Open')[^\u0026lt;\u0026gt;])+)(?(Open)(?!)).\n还有些什么东西没提到 上边已经描述了构造正则表达式的大量元素，但是还有很多没有提到的东西。下面是一些未提到的元素的列表，包含语法和简单的说明。你可以在网上找到更详细的参考资料来学习它们\u0026ndash;当你需要用到它们的时候。如果你安装了MSDN Library,你也可以在里面找到.net下正则表达式详细的文档。\n这里的介绍很简略，如果你需要更详细的信息，而又没有在电脑上安装MSDN Library,可以查看关于正则表达式语言元素的MSDN在线文档。\n 代码/语法 说明 \\a 报警字符(打印它的效果是电脑嘀一声) \\b 通常是单词分界位置，但如果在字符类里使用代表退格 \\t 制表符，Tab \\r 回车 \\v 竖向制表符 \\f 换页符 \\n 换行符 \\e Escape \\0nn ASCII代码中八进制代码为nn的字符 \\xnn ASCII代码中十六进制代码为nn的字符 \\unnnn Unicode代码中十六进制代码为nnnn的字符 \\cN ASCII控制字符。比如\\cC代表Ctrl+C \\A 字符串开头(类似^，但不受处理多行选项的影响) \\Z 字符串结尾或行尾(不受处理多行选项的影响) \\z 字符串结尾(类似$，但不受处理多行选项的影响) \\G 当前搜索的开头 \\p{name} Unicode中命名为name的字符类，例如\\p{IsGreek} (?\u0026gt;exp) 贪婪子表达式 (?-exp) 平衡组 (?im-nsx:exp) 在子表达式exp中改变处理选项 (?im-nsx) 为表达式后面的部分改变处理选项 (?(exp)yes|no) 把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no (?(exp)yes) 同上，只是使用空表达式作为no (?(name)yes|no) 如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no (?(name)yes) 同上，只是使用空表达式作为no 网上的资源及本文参考文献\n 微软的正则表达式教程 System.Text.RegularExpressions.Regex类(MSDN) 专业的正则表达式教学网站(英文) 关于.Net下的平衡组的详细讨论（英文） Mastering Regular Expressions (Second Edition) ","dateformatted":"28, September 2017","dateiso":"2017-09-28T15:42:33Z","ref":"/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F30%E5%88%86%E9%92%9F%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/","summary":"\n 目录 跳过目录\n 本文目标 如何使用本教程 正则表达式到底是什么东西？ 入门 测试正则表达式 元字符 字符转义 重复 字符类 分枝条件 反义 分组 后向引用 零宽断言 负向零宽断言 注释 贪婪与懒惰 处理选项 平衡组/递归匹配 还有些什么东西没提到 联系作者 网上的资源及本文参考文献 更新纪录 本文目标 30分钟内让你明白正则表达式是什么，并对它有一些基本的了解，让你可以在自己的程序或网页里使用它。\n\n","tags":["软文收集"],"title":"正则表达式30分钟入门教程"},{"content":"图片嵌入 使用URL链接的形式插入图片：\n![image][url_to_image]1 这样做一个明显的麻烦之处在于处理图片与Markdown文档的一致性上。如果我们要拷贝文档，或者图片遭到误删/云端链接失效，就会变得不便。最让我们省心的方法便是将图片直接放到文档内部。\n一个将图片嵌入文档中的方法是使用base64编码。步骤比较简单：\n 将图片或截图保存在本地； 使用在线工具将图片转码至base64编码；(link1, link2)； 在文档中插入编码： ![image][data:image/png;base64, ......]1 当然base64编码一般很长，直接将编码放入段落内部会影响正常编辑。通常的做法是将base64编码定义到一个中间变量中，将编码本体放到文档末：\n![image][tmp] your document here ... [tmp]:data:image/png;base64, ......1234 使用该技巧的时候需要注意，并不是所有的Markdown编辑器都支持这种方法。而且一些Markdown编辑器只支持特定的图片格式。如有道云笔记只支持png格式的图片编码。需要在保存图片文件的时候加以注意。\n","dateformatted":"21, September 2017","dateiso":"2017-09-21T15:42:33Z","ref":"/markdown%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","summary":"\n 图片嵌入 使用URL链接的形式插入图片：\n![image][url_to_image]1 这样做一个明显的麻烦之处在于处理图片与Markdown文档的一致性上。如果我们要拷贝文档，或者图片遭到误删/云端链接失效，就会变得不便。最让我们省心的方法便是将图片直接放到文档内部。\n一个将图片嵌入文档中的方法是使用base64编码。步骤比较简单：\n 将图片或截图保存在本地； 使用在线工具将图片转码至base64编码；(link1, link2)； 在文档中插入编码： ![image][data:image/png;base64, ......]1 当然base64编码一般很长，直接将编码放入段落内部会影响正常编辑。通常的做法是将base64编码定义到一个中间变量中，将编码本体放到文档末：\n![image][tmp] your document here ... [tmp]:data:image/png;base64, .\n\n","tags":null,"title":"Markdown基本使用"},{"content":"开源监控软件对比 Cacti**（英文含义仙人掌）** 是一套基于PHP、MySQL、SNMP和RRDtool开发的网络流量监测图形分析工具，它通过snmpget来获取数据使用RRDtool绘图，简化RRDtool使用。提供了非常强大的数据和用户管理功能，可以指定每一个用户能查看树状结构、主机设备以及任何一张图，还可以与LDAP结合进行用户认证，同时也能自定义模板。在历史数据展示监控方面，其功能相当不错。\nCacti通过添加模板，使不同设备的监控添加具有可复用性，并且具备可自定义绘图的功能，具有强大的运算能力（数据的叠加功能）\n nagios Nagios是一款开源的免费网络监视工具，能有效监控Windows、Linux和Unix的主机状态，交换机路由器等网络设置，打印机等。\nNagios 可以监控的功能有： 1、监控网络服务（SMTP、POP3、HTTP、NNTP、PING等）； 2、监控主机资源（处理器负荷、磁盘利用率等）； 3、简单地插件设计使得用户可以方便地扩展自己服务的检测方法； 4、并行服务检查机制； 5、具备定义网络分层结构的能力，用\u0026quot;parent\u0026quot;主机定义来表达网络主机间的关系，这种关系可被用来发现和明晰主机宕机或不可达状态； 6、当服务或主机问题产生与解决时将告警发送给联系人（通过EMail、短信、用户定义方式）； 7、具备定义事件句柄功能，它可以在主机或服务的事件发生时获取更多问题定位； 8、自动的日志回滚； 9、可以支持并实现对主机的冗余监控； 10、可选的WEB界面用于查看当前的网络状态、通知和故障历史、日志文件等；\n Ganglia 是一个跨平台的、可扩展的、高性能的分布式监控系统，如集群和网格。它基于分层设计，使用广泛的技术，用RRDtool存储数据。具有可视化界面，适合对集群系统的自动化监控。其精心设计的数据结构和算法使得监控端到被监控端的连接开销非常低。目前已经有成千上万的集群正在使用这个监控系统，可以轻松的处理2000个节点的集群环境。\nGanglia的强大在于：ganglia服务端能够通过一台客户端收集到同一个网段的所有客户端的数据，ganglia集群服务端能够通过一台服务端收集到它下属的所有客户端数据。\n Zabbix 是一个基于web界面的分布式监控系统，支持多种采集方式采集客户端，有专用的Agent代理，也支持SNMP、IPMI、JMX、Telnet、SSH等多种协议，它将采集到的数据存放到数据库，然后对其进行分析整理，达到条件触发告警。其灵活的扩展性和丰富的功能是其他监控系统所不能比的。\n\n结论：\n从以上各种监控系统的对比来看，Zabbix都是具有优势的，其丰富的功能、可扩展的能力、二次开发的能力和简单易用的特点，读者只要稍加学习，即可构建自己的监控系统。\nZabbix 选择zabbix的理由： - 安装与配置简单，学习成本低 - 支持多语言（包括中文） - 免费开源\n- 数据采集到数据库，可二次分析监控数据的。 - 自动发现服务器与网络设备 - 分布式监视以及WEB集中管理功能 - 可以无agent监视 - 用户安全认证和柔软的授权方式 - 通过WEB界面设置或查看监视结果 - email等通知功能 等等\n组成： zabbix server：可以通过SNMP、zabbixagent、ping、端口监视等方法提供对远程服务器/网络状态的监视，数据收集等功能，它可以运行在Linux, Solaris, HP-UX, AIX, Free BSD, Open BSD, OS X等平台之上。\nzabbix agent（可选组件）：安装在被监视的目标服务器上，它主要完成对硬件信息或与操作系统有关的内存，CPU等信息的收集。\n生命周期 \n目前推荐使用Zabbix2.2\n安装 准备： epel源、mysql已安装(yum install mysql-server)、zabbix官方仓库（http://repo.zabbix.com/）\n 安装epel源 # wget –O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo\n安装Zabbix官方源码： #rpm -ivh http://repo.zabbix.com/zabbix/2.2/rhel/6/x86_64/zabbix-release-2.2-1.el6.noarch.rpm\n安装zabbix server： \\3. 安装依赖包yum install -y OpenIPMI\n \\4. yum install -y zabbix-server zabbix-server-mysql\n\n创建数据库 \nmysql\u0026gt; create database zabbix; mysql\u0026gt; grant all on zabbix.* to zabbix@localhost identified by \u0026quot;zabbix_pass\u0026quot;; # mysql -uzabbix -pzabbix_pass -hlocalhost zabbix # 测试 # rpm -ql zabbix-server-mysql 导入server端数据表（注意顺序）： # mysql -uzabbix -pzabbix_pass -hlocalhost zabbix \u0026lt;/usr/share/doc/zabbix-server-mysql-2.2.11/create/schema.sql \u0026lt;--导入数据结构 #mysql -uzabbix -pzabbix_pass -hlocalhost zabbix \u0026lt;/usr/share/doc/zabbix-server-mysql-2.2.11/create/images.sql \u0026lt;--导入图片 # mysql -uzabbix -pzabbix_pass -hlocalhost zabbix \u0026lt;/usr/share/doc/zabbix-server-mysql-2.2.11/create/data.sql \u0026lt;--导入数据 \n修改配置文件 # vim /etc/zabbix/zabbix_server.conf \u0026lt;\u0026ndash;增加zabbix使用数据库的密码 [root@zabbix-server ~]# egrep -v \u0026ldquo;^#|^$\u0026rdquo; /etc/zabbix/zabbix_server.conf\nLogFile=/var/log/zabbix/zabbix_server.log\nLogFileSize=0\nPidFile=/var/run/zabbix/zabbix_server.pid\nDBHost=localhost\nDBName=zabbix\nDBUser=zabbix\nDBPassword=zabbix_pass ** \u0026lt;\u0026ndash;需修改同数据库设置**\nDBSocket=/tmp/mysql.sock\nSNMPTrapperFile=/var/log/snmptt/snmptt.log\nAlertScriptsPath=/usr/lib/zabbix/alertscripts\nExternalScripts=/usr/lib/zabbix/externalscripts\n启动zabbix server： #service zabbix-server start\n# netstat -ntlpu|grep 10051 ß检查启动状态\n# chkconfig zabbix-server on ß添加开机启动\nserver端安装zabbix web： \\1. # yum install zabbix-web zabbix-web-mysql\n\n默认安装了httpd服务，启动httpd\n# chkconfig httpd on ß添加开机启动\n\\2. 访问http://ip/zabbix进入安装\n\n==\u0026gt;解决：修改时区 # vim /etc/httpd/conf.d/zabbix.conf\n\n 登录默认用户admin 密码：zabbix\n 修改字体\n vim /usr/share/zabbix/include/locales.inc.php\nyum -y install wqy-microhei-fonts ß安装中文字体集\nrm -f /etc/alternatives/zabbix-web-font #删除原有字体连接文件\nln -s /usr/share/fonts/wqy-microhei/wqy-microhei.ttc /etc/alternatives/zabbix-web-font\n安装agent 客户端和服务端都安装\n\\1. # yum install -y zabbix-agent\n\n# vim /etc/zabbix/zabbix_agentd.conf //修改被动模式IP为zabbix server ip\n\n注：（一个Agent是可以同时向多个服务器端发送数据，多个Ip用逗号隔开）\nServer：被动模式，允许哪台服务器连接Agent。\nServerActive：主动模式，向哪台服务器传送数据。\n# /etc/init.d/zabbix-agent start //启动agent\n# netstat -lntp |grep 10050 //验证端口\n如果提示不能正常运行，分别检查zabbix_server.conf中的各项配置文件、Selinux、Iptables等。配置文件请检查以下文件的正确配置参数。\n1./etc/zabbix/zabbix_server.conf中的参数。\n# DBHost=localhost ß数据库的IP(域名)地址\nDBName=zabbix ß数据库的名称\nDBUser=zabbix ß数据库的用户\nDBPassword=zabbix ß数据库的密码\n2./etc/zabbix/web/zabbix.conf.php中的配置。\n[root@linux-node1 ~]# cat /etc/zabbix/web/zabbix.conf.php\n监控流程 \nZabbix-Get使用 Zabbix-Get是Zabbix中的一个程序，用于Zabbix-Server到Zabbix-Agent的数据获取，通常可以用来检测验证Agent的配置是否正确。\n用法：zabbix_get [-hV] -s [-p ] [-I ] -k -s：远程Zabbix-Agent的IP地址或者是主机名。\n-p：远程Zabbix-Agent的端口。\n-l：本机出去的IP地址，用于一台机器中又多个网卡的情况。\n-k：获取远程Zabbix-Agent数据所使用的Key。\n实现监控cpu（zabbix server主机上操作） # yum install -y zabbix-get //安装zabbix-get工具\n# zabbix_get -s 192.168.3.113 -k system.cpu.util[,user]\n\nAgent数据采集方式：passive、active\nOther Agent：SNMP、IPMI、Java Gateway\n","dateformatted":"18, September 2017","dateiso":"2017-09-18T15:42:33Z","ref":"/%E5%BC%80%E6%BA%90%E7%9B%91%E6%8E%A7%E8%BD%AF%E4%BB%B6%E5%AF%B9%E6%AF%94_zabbix/","summary":"\n 开源监控软件对比 Cacti**（英文含义仙人掌）** 是一套基于PHP、MySQL、SNMP和RRDtool开发的网络流量监测图形分析工具，它通过snmpget来获取数据使用RRDtool绘图，简化RRDtool使用。提供了非常强大的数据和用户管理功能，可以指定每一个用户能查看树状结构、主机设备以及任何一张图，还可以与LDAP结合进行用户认证，同时也能自定义模板。在历史数据展示监控方面，其功能相当不错。\nCacti通过添加模板，使不同设备的监控添加具有可复用性，并且具备可自定义绘图的功能，具有强大的运算能力（数据的叠加功能）\n nagios Nagios是一款开源的免费网络监视工具，能有效监控Windows、Linux和Unix的主机状态，交换机路由器等网络设置，打印机等。\nNagios 可以监控的功能有： 1、监控网络服务（SMTP、POP3、HTTP、NNTP、PING等）； 2、监控主机资源（处理器负荷、磁盘利用率等）； 3、简单地插件设计使得用户可以方便地扩展自己服务的检测方法； 4、并行服务检查机制； 5、具备定义网络分层结构的能力，用\u0026quot;parent\u0026quot;主机定义来表达网络主机间的关系，这种关系可被用来发现和明晰主机宕机或不可达状态； 6、当服务或主机问题产生与解决时将告警发送给联系人（通过EMail、短信、用户定义方式）； 7、具备定义事件句柄功能，它可以在主机或服务的事件发生时获取更多问题定位； 8、自动的日志回滚； 9、可以支持并实现对主机的冗余监控； 10、可选的WEB界面用于查看当前的网络状态、通知和故障历史、日志文件等；\n\n","tags":["软文收集","zabbix"],"title":"开源监控软件对比_zabbix"},{"content":"什么是 Hexo？ Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n安装 安装 Hexo 只需几分钟时间，若您在安装过程中遇到问题或无法找到解决方式，请提交问题，我会尽力解决您的问题。\n安装前提 安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：\n Node.js Git 如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。\n$ npm install -g hexo-cli 如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。\n Mac 用户\n您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -\u0026gt; Download -\u0026gt; Command Line Tools -\u0026gt; Install 安装命令行工具。\n 安装 Git Windows：下载并安装 git. Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。 Linux (Ubuntu, Debian)：sudo apt-get install git-core Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core Windows 用户\n由于众所周知的原因，从上面的链接下载git for windows最好挂上一个代理，否则下载速度十分缓慢。也可以参考这个页面，收录了存储于百度云的下载地址。\n 安装 Node.js 安装 Node.js 的最佳方式是使用 nvm。\ncURL:\n$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh Wget:\n$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh 安装完成后，重启终端并执行下列命令即可安装 Node.js。\n$ nvm install stable 或者您也可以下载 安装程序 来安装。\n Windows 用户\n对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。 另外，您也可以使用Git Bash，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。\n 安装 Hexo 所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。\n$ npm install -g hexo-cli 变量 全局变量 变量\t描述 site\t网站变量 page\t针对该页面的内容以及 front-matter 所设定的变量。 config\t网站配置 theme\t主题配置。继承自网站配置。 _ (单下划线)\tLodash 函数库 path\t当前页面的路径（不含根路径） url\t当前页面的完整网址 env\t环境变量 网站变量 变量\t描述 site.posts\t所有文章 site.pages\t所有分页 site.categories\t所有分类 site.tags\t所有标签 页面变量 页面（page）\n变量\t描述 page.title\t页面标题 page.date\t页面建立日期（Moment.js 对象） page.updated\t页面更新日期（Moment.js 对象） page.comments\t留言是否开启 page.layout\t布局名称 page.content\t页面的完整内容 page.excerpt\t页面摘要 page.more\t除了页面摘要的其余内容 page.source\t页面原始路径 page.full_source\t页面的完整原始路径 page.path\t页面网址（不含根路径）。我们通常在主题中使用 url_for(page.path)。 page.permalink\t页面的完整网址 page.prev\t上一个页面。如果此为第一个页面则为 null。 page.next\t下一个页面。如果此为最后一个页面则为 null。 page.raw\t文章的原始内容 page.photos\t文章的照片（用于相簿） page.link\t文章的外部链接（用于链接文章） 文章 (post): 和 page 布局类似，但是添加了下列变量。\nVariable\tDescription page.published\t如果该文章已发布则为True page.categories\t该文章的所有分类 page.tags\t该文章的所有标签 首页（index）\n变量\t描述 page.per_page\t每页显示的文章数量 page.total\t总文章数 page.current\t目前页数 page.current_url\t目前分页的网址 page.posts\t本页文章 page.prev\t上一页的页数。如果此页是第一页的话则为 0。 page.prev_link\t上一页的网址。如果此页是第一页的话则为 \u0026lsquo;'。 page.next\t下一页的页数。如果此页是最后一页的话则为 0。 page.next_link\t下一页的网址。如果此页是最后一页的话则为 \u0026lsquo;'。 page.path\t当前页面的路径（不含根目录）。我们通常在主题中使用 url_for(page.path)。 归档 (archive)：与 index 布局相同，但新增以下变量。\n变量\t描述 page.archive\t等于 true page.year\t年份归档 (4位) page.month\t月份归档 (没有前导零的2位数) 分类 (category)：与 index 布局相同，但新增以下变量。\n变量\t描述 page.category\t分类名称 标签 (tag)：与 index 布局相同，但新增以下变量。\n变量\t描述 page.tag\t标签名称\n新建一个自定义页面 （以添加关于页为例）： hexo new page about 编辑生成的 about/index.md 文件，设置布局为 page: title: about layout: page\n插件使用 hexo-asset-image Give asset image in hexo a absolutely path automatically\nUsege\nnpm install hexo-asset-image \u0026ndash;save Example\nMacGesture2-Publish ├── apppicker.jpg ├── logo.jpg └── rules.jpg MacGesture2-Publish.md Make sure post_asset_folder: true in your _config.yml.\n利用markdown标签\nJust use to insert logo.jpg.\n利用标签引用\n{% asset_path slug %} {% asset_img slug [title] %} {% asset_link slug [title] %}\nhexo-tag-html5 Adding embedded html5 video to hexo\n{% html5video %} {% asset_path big-buck-bunny_trailer.webm %} {% endhtml5video %}\nUsage: With no args, the defaults are used: width = \u0026lsquo;100%\u0026rsquo; height = \u0026lsquo;250px\u0026rsquo; codec = \u0026lsquo;video/webm\u0026rsquo;\n{% html5video %} {% asset_path big-buck-bunny_trailer.webm %} {% endhtml5video %}\nor with args:\n{% html5video \u0026lsquo;100%\u0026rsquo; \u0026lsquo;250px\u0026rsquo; \u0026lsquo;video/mp4\u0026rsquo; %} {% asset_path big-buck-bunny_trailer.webm %} {% endhtml5video %}\nAdd hexo-tag-html5 to your _config.yml file including all the other packages you\u0026rsquo;re using. (Once you include one, you will need to include them all, grab the list from you package.json)\nExample: plugins: [hexo-tag-html5, hexo-deployer-git, hexo-server, hexo-generator-index, hexo-generator-archive, hexo-generator-category, hexo-generator-json-content, hexo-generator-tag, hexo-renderer-ejs, hexo-renderer-marked, hexo-renderer-stylus, hexo-tag-bootstrap, hexo-tag-fontawesome, hexo-tag-leaflet]\nhttps://wohugb.gitbooks.io npm使用\n","dateformatted":"16, September 2017","dateiso":"2017-09-16T15:42:33Z","ref":"/hexo%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/","summary":"\n 什么是 Hexo？ Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n安装 安装 Hexo 只需几分钟时间，若您在安装过程中遇到问题或无法找到解决方式，请提交问题，我会尽力解决您的问题。\n安装前提 安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：\n Node.js Git 如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。\n\n","tags":["hexo"],"title":"Hexo基础使用"},{"content":"","dateformatted":"5, September 2017","dateiso":"2017-09-05T07:43:59+02:00","ref":"/kortkommandon-windows7/","summary":"\n \n\n","tags":null,"title":"Kortkommandon Windows 7"}]