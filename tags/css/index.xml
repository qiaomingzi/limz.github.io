<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CSS on Henrik Sommerfeld's blog</title><link>https://www.henriksommerfeld.se/tags/css/</link><description>Recent content in CSS on Henrik Sommerfeld's blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Fri, 15 Nov 2019 14:14:10 +0100</lastBuildDate><atom:link href="https://www.henriksommerfeld.se/tags/css/index.xml" rel="self" type="application/rss+xml"/><item><title>Dark Mode Learnings ðŸŒ™</title><link>https://www.henriksommerfeld.se/dark-mode-learnings/</link><pubDate>Fri, 15 Nov 2019 14:14:10 +0100</pubDate><guid>https://www.henriksommerfeld.se/dark-mode-learnings/</guid><description>So, I decided to implement dark mode on my website (to tackle parental leave boredom). I&amp;rsquo;ll describe what I did and what I could have done differently in hindsight.</description></item><item><title>Refactoring z-index</title><link>https://www.henriksommerfeld.se/refactoring-z-index/</link><pubDate>Sun, 09 Jun 2019 20:41:10 +0200</pubDate><guid>https://www.henriksommerfeld.se/refactoring-z-index/</guid><description>Ever found a z-index of 999 in CSS and wondered if there really are 998 other elements below it? This is a post about how I have refactored CSS z-indexes to become sane.</description></item><item><title>Replacing Web Compiler With Node Sass</title><link>https://www.henriksommerfeld.se/replacing-webcompiler-with-node-sass/</link><pubDate>Mon, 30 Oct 2017 05:48:41 +0100</pubDate><guid>https://www.henriksommerfeld.se/replacing-webcompiler-with-node-sass/</guid><description>After a long time of unreliable results with Web Compiler, especially in TFS, I decided to replace it with node-sass.
Web Compiler is an extension to Visual Studio that listens to changes in your .scss files (among others) and compiles them. It can also be configured to run as part of your TFS build. With our solution this has however been highly unreliable, where Web Compiler claims that files have been compiled, but the changes you made are not reflected in the resulting bundles.</description></item><item><title>Build Steps Using NPM Scripts for My Hugo Blog</title><link>https://www.henriksommerfeld.se/build-steps-using-npm-scripts-for-my-hugo-blog/</link><pubDate>Sun, 17 Sep 2017 17:15:54 +0200</pubDate><guid>https://www.henriksommerfeld.se/build-steps-using-npm-scripts-for-my-hugo-blog/</guid><description>Quite recently I migrated this blog from WordPress to Hugo. Since I didn&amp;rsquo;t want to use a theme built by someone else, I had to add things like CSS and JavaScript myself. To be able to work with this locally in an efficient way and to be able to produce a complete build output in a reproducible manner, I had to automate the build steps. With WordPress I used Gulp for this, but I thought that might not be needed, so I made an attempt to do this using only npm scripts.</description></item><item><title>Sass vs SCSS</title><link>https://www.henriksommerfeld.se/sass-vs-scss/</link><pubDate>Wed, 12 Jul 2017 11:03:44 +0000</pubDate><guid>https://www.henriksommerfeld.se/sass-vs-scss/</guid><description>As I have worked more and more with CSS during the last year, both at work and with an updated version of this blog, I have come to the following conclusions regarding the Sass vs SCSS syntax.
SCSS is the obvious default choice as it&amp;rsquo;s a more natural extension of CSS and that you can simply rename an existing .css file. In a team with several developers focused more on server-side, it&amp;rsquo;s usually easier to explain SCSS than Sass syntax.</description></item><item><title>Using a Responsive CSS Grid with Relative Measures</title><link>https://www.henriksommerfeld.se/using-a-responsive-css-grid-with-relative-measures/</link><pubDate>Sun, 16 Nov 2014 17:05:57 +0000</pubDate><guid>https://www.henriksommerfeld.se/using-a-responsive-css-grid-with-relative-measures/</guid><description>When you build a web site on a [CMS][1] and a theme made by someone else you always have some limitations. For this blog I use WordPress and the [Montezuma theme][2], and this is how I customised the default CSS grid options to my liking.
figure.lazy {
display: none;
}
These are the grid options you can choose from in version 1.2.4 of the Montezuma theme.</description></item></channel></rss>