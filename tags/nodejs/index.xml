<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NodeJS on Henrik Sommerfeld's blog</title><link>https://www.henriksommerfeld.se/tags/nodejs/</link><description>Recent content in NodeJS on Henrik Sommerfeld's blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 23 Jul 2020 18:47:00 +0200</lastBuildDate><atom:link href="https://www.henriksommerfeld.se/tags/nodejs/index.xml" rel="self" type="application/rss+xml"/><item><title>Search for Static Website Without External Service</title><link>https://www.henriksommerfeld.se/search-static-website-without-external-service/</link><pubDate>Thu, 23 Jul 2020 18:47:00 +0200</pubDate><guid>https://www.henriksommerfeld.se/search-static-website-without-external-service/</guid><description>When you have a static website, there are a few things that you usually don’t have out-of-the-box. One such thing is search. You can argue that you don’t need it, but if you want it and your site isn’t that large, I’ll describe how I’ve set it up without an external service.</description></item><item><title>Asuswrt-Merlin Firmware Update Checker</title><link>https://www.henriksommerfeld.se/asuswrt-merlin-firmware-update-checker/</link><pubDate>Wed, 08 Apr 2020 14:02:21 +0200</pubDate><guid>https://www.henriksommerfeld.se/asuswrt-merlin-firmware-update-checker/</guid><description>I have an Asus RT-AC68U router at home. I’ve previously used the build-in update checker together with a notification script that ran on the router itself. Recently I noticed that I hadn’t got any update notifications in a long time, one of the downsides of silent failures. This is my custom code that looks for updates.</description></item><item><title>Yarn Resolutions to Fix Build Error With Multiple Versions of NPM Package</title><link>https://www.henriksommerfeld.se/yarn-resolutions-to-fix-build-error-with-multiple-versions-of-npm-package/</link><pubDate>Wed, 29 Jan 2020 11:30:09 +0100</pubDate><guid>https://www.henriksommerfeld.se/yarn-resolutions-to-fix-build-error-with-multiple-versions-of-npm-package/</guid><description>So, I upgraded Cypress from 3.7.0 to 3.8.2 and ran everything locally - no problems. But the build failed both in GitHub Actions and Netlify. I now had two conflicting versions. When using Yarn, this can be solved with Selective dependency resolutions, by adding the following to package.json</description></item><item><title>Gatsby Source Plugin for Twitter</title><link>https://www.henriksommerfeld.se/gatsby-source-plugin-for-twitter/</link><pubDate>Thu, 31 Oct 2019 00:20:10 +0100</pubDate><guid>https://www.henriksommerfeld.se/gatsby-source-plugin-for-twitter/</guid><description>I was rewriting a WordPress site in Gatsby that had embedded tweets using an embed script (WordPress plugin). The product owner (my wife), required the new site to also show her tweets. I didn’t like the idea of an embed script (that would slow down the site and spy on visitors), so I started to look into Gatsby source plugins.</description></item><item><title>Create Fake Backend with Node Express</title><link>https://www.henriksommerfeld.se/create-fake-backend-with-node-express/</link><pubDate>Sun, 04 Mar 2018 18:16:00 +0100</pubDate><guid>https://www.henriksommerfeld.se/create-fake-backend-with-node-express/</guid><description>The thing I&amp;rsquo;m most satisfied with in a long time is the introduction of a fake backend for my team&amp;rsquo;s frontend development. When you have another system that you depend on and that you have no control over, it&amp;rsquo;s always worth considering if that system can be replaced with a fake version for development.
This is especially valuable when this backend system(s) is highly configurable and can be in a lot of different &amp;ldquo;states&amp;rdquo; that you cannot control.</description></item><item><title>Replacing Web Compiler With Node Sass</title><link>https://www.henriksommerfeld.se/replacing-webcompiler-with-node-sass/</link><pubDate>Mon, 30 Oct 2017 05:48:41 +0100</pubDate><guid>https://www.henriksommerfeld.se/replacing-webcompiler-with-node-sass/</guid><description>After a long time of unreliable results with Web Compiler, especially in TFS, I decided to replace it with node-sass.
Web Compiler is an extension to Visual Studio that listens to changes in your .scss files (among others) and compiles them. It can also be configured to run as part of your TFS build. With our solution this has however been highly unreliable, where Web Compiler claims that files have been compiled, but the changes you made are not reflected in the resulting bundles.</description></item><item><title>Build Steps Using NPM Scripts for My Hugo Blog</title><link>https://www.henriksommerfeld.se/build-steps-using-npm-scripts-for-my-hugo-blog/</link><pubDate>Sun, 17 Sep 2017 17:15:54 +0200</pubDate><guid>https://www.henriksommerfeld.se/build-steps-using-npm-scripts-for-my-hugo-blog/</guid><description>Quite recently I migrated this blog from WordPress to Hugo. Since I didn&amp;rsquo;t want to use a theme built by someone else, I had to add things like CSS and JavaScript myself. To be able to work with this locally in an efficient way and to be able to produce a complete build output in a reproducible manner, I had to automate the build steps. With WordPress I used Gulp for this, but I thought that might not be needed, so I made an attempt to do this using only npm scripts.</description></item><item><title>Frustration with NodeJS on Windows</title><link>https://www.henriksommerfeld.se/frustration-with-nodejs-on-windows/</link><pubDate>Sat, 07 Jan 2017 11:22:55 +0000</pubDate><guid>https://www.henriksommerfeld.se/frustration-with-nodejs-on-windows/</guid><description>During the last couple of years I have noticed more and more developers switching to Mac, especially among those in the SharePoint field that traditionally have been very loyal to Microsoft. I see a correlation between this and the trend away from Visual Studio bound development. After playing around with NodeJS for awhile I understand why and hope for a change. Hopefully I can save you some googling with the links in this post if you run into the same issues as I have.</description></item><item><title>My IoT Exploration – Part 4 – Presenting the Data</title><link>https://www.henriksommerfeld.se/my-iot-exploration-part-4-presenting-the-data/</link><pubDate>Sun, 13 Nov 2016 18:08:36 +0000</pubDate><guid>https://www.henriksommerfeld.se/my-iot-exploration-part-4-presenting-the-data/</guid><description>This is my fourth post about exploring Internet of Things, previous posts can be found here:
My IoT Exploration – Part 1 – The Failure My IoT Exploration – Part 2 – Raspberry Pi Sense HAT My IoT Exploration – Part 3 – Sending Data to Cloud For the last piece of this project I pretty much followed the approach described in Visualizing IoT Data with Web App. Since I wanted to learn how to create and deploy Azure Web Apps, this was a good fit.</description></item><item><title>My IoT Exploration – Part 3 – Sending Data to Cloud</title><link>https://www.henriksommerfeld.se/my-iot-exploration-part-3-sending-data-to-cloud/</link><pubDate>Wed, 09 Nov 2016 08:48:02 +0000</pubDate><guid>https://www.henriksommerfeld.se/my-iot-exploration-part-3-sending-data-to-cloud/</guid><description>In part 3 of my IoT exploration I connect my Raspberry Pi to Azure IoT Hub and create a NodeJS app that relays data from my Python program to Azure.</description></item></channel></rss>