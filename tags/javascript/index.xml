<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript on Henrik Sommerfeld's blog</title><link>https://www.henriksommerfeld.se/tags/javascript/</link><description>Recent content in JavaScript on Henrik Sommerfeld's blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 23 Jul 2020 18:47:00 +0200</lastBuildDate><atom:link href="https://www.henriksommerfeld.se/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Search for Static Website Without External Service</title><link>https://www.henriksommerfeld.se/search-static-website-without-external-service/</link><pubDate>Thu, 23 Jul 2020 18:47:00 +0200</pubDate><guid>https://www.henriksommerfeld.se/search-static-website-without-external-service/</guid><description>When you have a static website, there are a few things that you usually don’t have out-of-the-box. One such thing is search. You can argue that you don’t need it, but if you want it and your site isn’t that large, I’ll describe how I’ve set it up without an external service.</description></item><item><title>Alpine.js – Benefits and Limitations</title><link>https://www.henriksommerfeld.se/alpinejs-benefits-and-limitations/</link><pubDate>Mon, 29 Jun 2020 06:21:00 +0200</pubDate><guid>https://www.henriksommerfeld.se/alpinejs-benefits-and-limitations/</guid><description>For the custom JavaScript code on my Hugo blog I use Alpine.js. I’ll discuss the benefits and the limitations in this post. This post is part 4 in the Hugo Pipeline Series, but the benefits and limitations I discuss are not specific to using Alpine.js together with Hugo.</description></item><item><title>Hugo Pipeline Series – Editing and Deploying</title><link>https://www.henriksommerfeld.se/hugo-pipeline-series-editing-and-deploying/</link><pubDate>Sun, 14 Jun 2020 22:12:00 +0200</pubDate><guid>https://www.henriksommerfeld.se/hugo-pipeline-series-editing-and-deploying/</guid><description>This is how I write and deploy content on this blog. I&amp;rsquo;ll describe how I work with images and JavaScript dependencies to keep building and deploying as quick as possible.</description></item><item><title>8 JavaScript Recommendations to a Struggling Student</title><link>https://www.henriksommerfeld.se/javascript-recommendations-to-a-struggling-student/</link><pubDate>Sat, 30 May 2020 10:21:00 +0200</pubDate><guid>https://www.henriksommerfeld.se/javascript-recommendations-to-a-struggling-student/</guid><description>I recently helpt a student struggling with a web development assignment. Not surprisingly, it wasn&amp;rsquo;t one specific thing that wasn&amp;rsquo;t working with a clear question on how to solve that specific problem. There were errors in the web browser console, long functions with wrong indentation that made it all hard to understand.</description></item><item><title>Gatsby vs Hugo for a Personal Blog</title><link>https://www.henriksommerfeld.se/gatsby-vs-hugo-for-personal-blog/</link><pubDate>Thu, 05 Dec 2019 22:20:34 +0100</pubDate><guid>https://www.henriksommerfeld.se/gatsby-vs-hugo-for-personal-blog/</guid><description>Having built two personal websites/blogs that are fairly similar, one using Gatsby and one using Hugo, I’ll take a moment to compare my experiences. All CSS is written from scratch for both sites, no framework. They both have categories and tags that you can use to find related posts. No server-side API is used, so once the build is done, everything is static. Well, I use Google Analytics and Disqus on both sites, but those are third-party API&amp;rsquo;s that I don&amp;rsquo;t have to manage.</description></item><item><title>Gatsby Source Plugin for Twitter</title><link>https://www.henriksommerfeld.se/gatsby-source-plugin-for-twitter/</link><pubDate>Thu, 31 Oct 2019 00:20:10 +0100</pubDate><guid>https://www.henriksommerfeld.se/gatsby-source-plugin-for-twitter/</guid><description>I was rewriting a WordPress site in Gatsby that had embedded tweets using an embed script (WordPress plugin). The product owner (my wife), required the new site to also show her tweets. I didn’t like the idea of an embed script (that would slow down the site and spy on visitors), so I started to look into Gatsby source plugins.</description></item><item><title>Error Handling with Fetch (and custom React hook)</title><link>https://www.henriksommerfeld.se/error-handling-with-fetch/</link><pubDate>Tue, 19 Mar 2019 21:35:58 +0100</pubDate><guid>https://www.henriksommerfeld.se/error-handling-with-fetch/</guid><description>One thing that has struck me with Javascript&amp;rsquo;s fetch function is that it often looks so simple. When I see the same thing in a pull request, I&amp;rsquo;m not overly impressed. No, just because this works on a sunny day doesn&amp;rsquo;t mean you&amp;rsquo;re done. You need error handling as well!</description></item><item><title>Create Fake Backend with Node Express</title><link>https://www.henriksommerfeld.se/create-fake-backend-with-node-express/</link><pubDate>Sun, 04 Mar 2018 18:16:00 +0100</pubDate><guid>https://www.henriksommerfeld.se/create-fake-backend-with-node-express/</guid><description>The thing I&amp;rsquo;m most satisfied with in a long time is the introduction of a fake backend for my team&amp;rsquo;s frontend development. When you have another system that you depend on and that you have no control over, it&amp;rsquo;s always worth considering if that system can be replaced with a fake version for development.
This is especially valuable when this backend system(s) is highly configurable and can be in a lot of different &amp;ldquo;states&amp;rdquo; that you cannot control.</description></item><item><title>Replacing Web Compiler With Node Sass</title><link>https://www.henriksommerfeld.se/replacing-webcompiler-with-node-sass/</link><pubDate>Mon, 30 Oct 2017 05:48:41 +0100</pubDate><guid>https://www.henriksommerfeld.se/replacing-webcompiler-with-node-sass/</guid><description>After a long time of unreliable results with Web Compiler, especially in TFS, I decided to replace it with node-sass.
Web Compiler is an extension to Visual Studio that listens to changes in your .scss files (among others) and compiles them. It can also be configured to run as part of your TFS build. With our solution this has however been highly unreliable, where Web Compiler claims that files have been compiled, but the changes you made are not reflected in the resulting bundles.</description></item><item><title>Build Steps Using NPM Scripts for My Hugo Blog</title><link>https://www.henriksommerfeld.se/build-steps-using-npm-scripts-for-my-hugo-blog/</link><pubDate>Sun, 17 Sep 2017 17:15:54 +0200</pubDate><guid>https://www.henriksommerfeld.se/build-steps-using-npm-scripts-for-my-hugo-blog/</guid><description>Quite recently I migrated this blog from WordPress to Hugo. Since I didn&amp;rsquo;t want to use a theme built by someone else, I had to add things like CSS and JavaScript myself. To be able to work with this locally in an efficient way and to be able to produce a complete build output in a reproducible manner, I had to automate the build steps. With WordPress I used Gulp for this, but I thought that might not be needed, so I made an attempt to do this using only npm scripts.</description></item></channel></rss>