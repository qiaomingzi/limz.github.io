<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coding on Henrik Sommerfeld's blog</title><link>https://www.henriksommerfeld.se/categories/coding/</link><description>Recent content in Coding on Henrik Sommerfeld's blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sun, 15 Nov 2020 20:34:00 +0200</lastBuildDate><atom:link href="https://www.henriksommerfeld.se/categories/coding/index.xml" rel="self" type="application/rss+xml"/><item><title>Usability Learnings from Building a CLI</title><link>https://www.henriksommerfeld.se/usability-learnings-from-building-a-cli/</link><pubDate>Sun, 15 Nov 2020 20:34:00 +0200</pubDate><guid>https://www.henriksommerfeld.se/usability-learnings-from-building-a-cli/</guid><description>From the past months of iterating on a CLI for managing micro services in our company, I&amp;rsquo;ve drawn some conclusions regarding usability. I&amp;rsquo;ll describe the features of OCLIF we&amp;rsquo;ve used to address the challenges.</description></item><item><title>Using Same Node in Jenkins Groovy Pipeline</title><link>https://www.henriksommerfeld.se/using-same-node-in-jenkins-groovy-pipeline/</link><pubDate>Sun, 25 Oct 2020 11:34:00 +0200</pubDate><guid>https://www.henriksommerfeld.se/using-same-node-in-jenkins-groovy-pipeline/</guid><description>As new to Jenkins, I made a mistake that led to confusing errors. Working with .groovy files in Jenkins shared libraries isn’t the most joyful experience I’ve had in my career, but this makes total sense once I saw the obvious.</description></item><item><title>Search for Static Website Without External Service</title><link>https://www.henriksommerfeld.se/search-static-website-without-external-service/</link><pubDate>Thu, 23 Jul 2020 18:47:00 +0200</pubDate><guid>https://www.henriksommerfeld.se/search-static-website-without-external-service/</guid><description>When you have a static website, there are a few things that you usually don’t have out-of-the-box. One such thing is search. You can argue that you don’t need it, but if you want it and your site isn’t that large, I’ll describe how I’ve set it up without an external service.</description></item><item><title>Alpine.js – Benefits and Limitations</title><link>https://www.henriksommerfeld.se/alpinejs-benefits-and-limitations/</link><pubDate>Mon, 29 Jun 2020 06:21:00 +0200</pubDate><guid>https://www.henriksommerfeld.se/alpinejs-benefits-and-limitations/</guid><description>For the custom JavaScript code on my Hugo blog I use Alpine.js. I’ll discuss the benefits and the limitations in this post. This post is part 4 in the Hugo Pipeline Series, but the benefits and limitations I discuss are not specific to using Alpine.js together with Hugo.</description></item><item><title>Hugo Pipeline Series – Developing and Deploying</title><link>https://www.henriksommerfeld.se/hugo-pipeline-series-developing-and-deploying/</link><pubDate>Mon, 22 Jun 2020 06:21:00 +0200</pubDate><guid>https://www.henriksommerfeld.se/hugo-pipeline-series-developing-and-deploying/</guid><description>In terms of developing my Hugo site, I&amp;rsquo;ll focus on the JavaScript parts, since Hugo templates and CSS isn&amp;rsquo;t much to talk about. I use a few libraries that I&amp;rsquo;ve installed with npm and those need to be processed before they are sent to the browser. The JavaScript code I have written myself, does not have that requirement. In that case it&amp;rsquo;s just a matter of how old browsers I want to support.</description></item><item><title>Hugo Pipeline Series – Editing and Deploying</title><link>https://www.henriksommerfeld.se/hugo-pipeline-series-editing-and-deploying/</link><pubDate>Sun, 14 Jun 2020 22:12:00 +0200</pubDate><guid>https://www.henriksommerfeld.se/hugo-pipeline-series-editing-and-deploying/</guid><description>This is how I write and deploy content on this blog. I&amp;rsquo;ll describe how I work with images and JavaScript dependencies to keep building and deploying as quick as possible.</description></item><item><title>Hugo Pipeline Series – Intro</title><link>https://www.henriksommerfeld.se/hugo-pipeline-series-intro/</link><pubDate>Sun, 14 Jun 2020 22:11:00 +0200</pubDate><guid>https://www.henriksommerfeld.se/hugo-pipeline-series-intro/</guid><description>In this post(s) I&amp;rsquo;ll describe how I created my personal blog with a fair amount of work to achieve simplicity.</description></item><item><title>8 JavaScript Recommendations to a Struggling Student</title><link>https://www.henriksommerfeld.se/javascript-recommendations-to-a-struggling-student/</link><pubDate>Sat, 30 May 2020 10:21:00 +0200</pubDate><guid>https://www.henriksommerfeld.se/javascript-recommendations-to-a-struggling-student/</guid><description>I recently helpt a student struggling with a web development assignment. Not surprisingly, it wasn&amp;rsquo;t one specific thing that wasn&amp;rsquo;t working with a clear question on how to solve that specific problem. There were errors in the web browser console, long functions with wrong indentation that made it all hard to understand.</description></item><item><title>Lazy Loading Images in Hugo</title><link>https://www.henriksommerfeld.se/lazy-loading-images-in-hugo/</link><pubDate>Wed, 05 Feb 2020 04:42:21 +0100</pubDate><guid>https://www.henriksommerfeld.se/lazy-loading-images-in-hugo/</guid><description>When writing another post, I realised that I hadn&amp;rsquo;t documented/described my image lazy loading implementation in Hugo anywhere, so here it comes. The first thing we need are responsive images, not the thing you get when setting the width to 100% in CSS, but different versions of the same image in different resolutions so that the web browser can pick the best one (using srcset).</description></item><item><title>Yarn Resolutions to Fix Build Error With Multiple Versions of NPM Package</title><link>https://www.henriksommerfeld.se/yarn-resolutions-to-fix-build-error-with-multiple-versions-of-npm-package/</link><pubDate>Wed, 29 Jan 2020 11:30:09 +0100</pubDate><guid>https://www.henriksommerfeld.se/yarn-resolutions-to-fix-build-error-with-multiple-versions-of-npm-package/</guid><description>So, I upgraded Cypress from 3.7.0 to 3.8.2 and ran everything locally - no problems. But the build failed both in GitHub Actions and Netlify. I now had two conflicting versions. When using Yarn, this can be solved with Selective dependency resolutions, by adding the following to package.json</description></item></channel></rss>